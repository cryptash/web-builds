{"version":3,"sources":["Contexts/ScreenContext.tsx","App.tsx","reportWebVitals.ts","config.ts","Reducers/UserReducer.ts","Reducers/ChatReducer.ts","Reducers/index.ts","Logux/store.ts","Pages/Login/Login.tsx","Components/Preloader/Preloader.tsx","Components/UserPicture/UserPicture.tsx","Pages/Chat/Sidebar/Header/Header.tsx","Utils/keysUtils.ts","Utils/decrypt.ts","Utils/formatDate.ts","Pages/Chat/Sidebar/ChatList/ChatCard.tsx","Contexts/SearchReducer.tsx","Pages/Chat/Sidebar/ChatList/ChatList.tsx","Pages/Chat/Sidebar/Search/Search.tsx","Pages/Chat/Sidebar/Sidebar.tsx","Pages/Chat/Dialog/MessageInput.tsx","Utils/encrypt.ts","Pages/Chat/Dialog/DialogHeader.tsx","Pages/Chat/Dialog/Message.tsx","Pages/Chat/Dialog/Dialog.tsx","Contexts/DialogContext.tsx","Pages/Chat/Chat.tsx","Pages/Home/Home.tsx","Pages/Register/Register.tsx","index.tsx"],"names":["ScreenContext","React","createContext","undefined","screenReducer","state","action","type","height","window","innerHeight","width","innerWidth","Error","initialState","ScreenProvider","children","useReducer","value","dispatch","Provider","useScreen","context","useContext","App","useEffect","vh","document","documentElement","style","setProperty","addEventListener","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","config","server_url","socket_url","user_id","username","pub_key","picture","chats","chat_id","messages","read_messages","status","actionCreator","actionCreatorFactory","changeChat","setChatId","getMessages","setMessageRead","searchUsers","createChat","sendMessage","rootReducer","combineReducers","userReducer","localStorage","setItem","payload","token","chat","filter","c","i","indexOf","content","read","date","message_id","fromMe","from","getItem","messageAt","x","unshift","chatReducer","data","id","push","Date","length","includes","m","message","userId","client","CrossTabClient","subprotocol","server","store","createStoreCreator","createStore","log","Login","useState","password","key","credentials","setCredentials","handleChange","target","name","history","useHistory","className","onSubmit","preventDefault","setStage","Client","on","AES","decrypt","private_key","toString","enc","Utf8","changeUser","alert","reason","start","add","sync","login","p","placeholder","onChange","to","Preloader","UserPicture","props","src","alt","background","toUpperCase","SidebarHeader","onClick","_","setOpen","user","removeItem","location","reload","formatKey","decodeBase64","decryptMessage","secretOrSharedKey","messageWithNonce","public_key","messageWithNonceAsUint8Array","nonce","slice","box","nonceLength","decrypted","open","after","console","error","base64DecryptedMessage","encodeUTF8","JSON","parse","text","isToday","today","getDate","getMonth","getFullYear","formatDate","d","rl","Intl","RelativeTimeFormat","now","diff","getTime","getHours","Math","floor","format","round","toLocaleTimeString","hour","minute","isYesterday","toLocaleDateString","day","month","year","formatTime","ChatCard","useDispatch","params","useParams","useMemo","datetime","opts","minInterval","SearchContext","searchReducer","users","SearchProvider","useSearch","connect","ownProps","search","chatArray","forEach","nanoid","toLowerCase","listener","SidebarSearch","input","useRef","isOpened","current","setTimeout","setOpened","focus","ref","query","handleSearch","Sidebar","screen","useSelector","isOpenedByUser","setOpenedByUser","MessageInput","setMessage","showPicker","setShowPicker","inputRef","handleSend","msg","json","nacl","randomBytes","messageUint8","decodeUTF8","stringify","encrypted","fullMessage","Uint8Array","set","encodeBase64","encryptMessage","scrollDown","emojiSize","perLine","onSelect","emoji","native","handleEmojiSelect","onInput","handleInput","DialogHeader","generateStatus","Message","isRead","setRead","messageRef","isActionSent","subscribe","getState","rect","getBoundingClientRect","top","scrollCallback","urlRE","RegExp","urls","match","res","url","split","rel","href","generateMessageWithUrl","page","prevScrollHeight","isRequested","setRequested","isSubscribing","useSubscription","messagesDiv","callbacks","mes","msgComp","subscribeToScroll","callback","scrollTop","scrollHeight","scrollTo","onScroll","pg","DialogContext","dialogReducer","DialogProvider","Chat","badge","synchronized","disconnected","wait","sending","protocolError","syncError","denied","styles","badgeStyles","Home","isLoggined","setLoginned","signOut","Register","keyPair","publicKey","secretKey","generateKeyPair","doesMeetReqs","setMeetReq","isSame","setSame","encrypt","register","autoComplete","disabled","ReactDOM","render","StrictMode","exact","path","component","getElementById"],"mappings":"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","file":"static/js/main.abceed9a.chunk.js","sourcesContent":["import React from 'react'\n\ntype Action = { type: 'CHANGE' }\ntype Dispatch = (action: Action) => void\n\nconst ScreenContext =\n  React.createContext<\n    | {\n        state: {\n          width: number\n          height: number\n        }\n        dispatch: Dispatch\n      }\n    | undefined\n  >(undefined)\n\nconst screenReducer = (\n  state: {\n    width: number\n    height: number\n  },\n  action: Action\n) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        height: window.innerHeight,\n        width: window.innerWidth\n      }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`)\n    }\n  }\n}\nconst initialState: {\n  width: number\n  height: number\n} = {\n  width: window.innerWidth,\n  height: window.innerHeight\n}\nconst ScreenProvider = ({ children }: { children: React.ReactNode }) => {\n  const [state, dispatch] = React.useReducer(screenReducer, initialState)\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = { state, dispatch }\n  return (\n    <ScreenContext.Provider value={value}>{children}</ScreenContext.Provider>\n  )\n}\nconst useScreen = () => {\n  const context = React.useContext(ScreenContext)\n  if (context === undefined) {\n    throw new Error('useCount must be used within a CountProvider')\n  }\n  return context\n}\n\nexport { ScreenContext, ScreenProvider, useScreen }\n","import React, { useEffect } from 'react'\nimport './App.css'\nimport { useScreen } from './Contexts/ScreenContext'\n\nconst App: React.FunctionComponent = ({ children }) => {\n  const { dispatch } = useScreen()\n  useEffect(() => {\n    let vh = window.innerHeight * 0.01\n    document.documentElement.style.setProperty('--vh', `${vh}px`)\n    window.addEventListener('resize', (e) => {\n      dispatch({ type: 'CHANGE' })\n      let vh = window.innerHeight * 0.01\n      document.documentElement.style.setProperty('--vh', `${vh}px`)\n    })\n  }, [dispatch])\n  return <>{children}</>\n}\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","const config = {\n  server_url: 'https://chat.ciphen.net/',\n  socket_url: 'wss://chat.ciphen.net'\n}\nexport default config\n","import { ChatResponse } from '../Typings/ChatReponse'\n\ninterface UserState {\n  username: string\n  user_id: string\n  pub_key: string\n  picture: string\n  chats: ChatResponse[]\n}\n\nconst initialState: UserState = {\n  user_id: '',\n  username: '',\n  pub_key: '',\n  picture: '',\n  chats: []\n}\n\nconst userReducer = (\n  state = initialState,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case 'login/done': {\n      localStorage.setItem('token', action.payload.token)\n      return { ...state }\n    }\n    case 'chat/message/create': {\n      const chat = state.chats.filter(\n        (c) => c.chat_id === action.payload.chat_id\n      )\n      if (chat[0]) {\n        const i = state.chats.indexOf(chat[0])\n        chat[0].messages[0] = {\n          content: action.payload.content,\n          read: action.payload.read,\n          date: action.payload.date,\n          message_id: action.payload.message_id,\n          fromMe: action.payload.from === localStorage.getItem('user_id')\n        }\n        chat[0].messageAt = action.payload.date\n        if (i !== 0) {\n          state.chats = state.chats.filter((x) => x !== chat[0])\n          state.chats.unshift(chat[0])\n        }\n      }\n      return { ...state }\n    }\n    case 'user/get_info/done': {\n      return action.payload\n    }\n    default: {\n      return state\n    }\n  }\n}\nexport { userReducer }\n","import { Message } from '../Typings/Message'\n\nexport type ChatState = {\n  messages: Message[]\n  username: string\n  pub_key: string\n  picture: string\n  user_id: string\n  chat_id: string\n  read_messages: string[]\n  status: 'OFFLINE' | 'ONLINE' | 'TYPING'\n}\n\nconst initialState: ChatState = {\n  username: '',\n  user_id: '',\n  picture: '',\n  pub_key: '',\n  chat_id: '',\n  messages: [],\n  read_messages: [],\n  status: 'OFFLINE'\n}\nconst chatReducer = (\n  state = initialState,\n  action: { type: string; payload?: any; id?: string }\n) => {\n  const data = action.payload\n  switch (action.type) {\n    case 'chat/load_messages/done': {\n      state.messages = [...data.messages, ...state.messages]\n      state.pub_key = data.pub_key\n      state.picture = data.picture\n      state.username = data.username\n      state.status = data.status\n      return { ...state }\n    }\n    case 'chat/change': {\n      return {\n        username: '',\n        user_id: '',\n        picture: '',\n        pub_key: '',\n        chat_id: action.payload.id,\n        messages: [],\n        read_messages: [],\n        status: 'OFFLINE'\n      }\n    }\n    case 'chat/messages/send': {\n      state.messages.push({\n        content: action.payload.content,\n        read: false,\n        date: new Date(),\n        message_id: '',\n        fromMe: true\n      })\n      return { ...state }\n    }\n    case 'chat/message/setId': {\n      if (state.chat_id === action.payload.chat_id) {\n        state.messages[state.messages.length - 1].message_id = action.payload.id\n        if (state.read_messages.includes(action.payload.id))\n          state.messages[state.messages.length - 1].read = true\n      }\n      return { ...state }\n    }\n    case 'chat/message/create': {\n      if (state.chat_id === action.payload.chat_id) {\n        if (\n          !state.messages.filter(\n            (m) => action.payload.message_id === m.message_id\n          )[0]\n        ) {\n          state.messages.push({\n            content: action.payload.content,\n            read: action.payload.read,\n            date: action.payload.date,\n            message_id: action.payload.message_id,\n            fromMe: action.payload.from === localStorage.getItem('user_id')\n          })\n        }\n      }\n      return { ...state }\n    }\n    case 'chat/change_key': {\n      state.pub_key = action.payload\n      return { ...state }\n    }\n    case 'chat/set_id': {\n      state.chat_id = action.payload.id\n      return { ...state }\n    }\n    case 'chat/message/read': {\n      if (action.payload.chat_id === state.chat_id) {\n        const message = state.messages.filter(\n          (m) => m.message_id === action.payload.message_id\n        )[0]\n        if (message)\n          state.messages.filter(\n            (m) => m.message_id === action.payload.message_id\n          )[0].read = true\n        else state.read_messages.push(action.payload.message_id)\n      }\n      return state\n    }\n    case 'chat/data/set': {\n      return { ...state, ...data }\n    }\n    default: {\n      return state\n    }\n  }\n}\nexport { chatReducer }\n","import { userReducer } from './UserReducer'\n\nimport { combineReducers } from 'redux'\nimport actionCreatorFactory from 'typescript-fsa'\nimport { chatReducer } from './ChatReducer'\n\nconst actionCreator = actionCreatorFactory()\n\nexport const changeChat = actionCreator<{ id: string }>('chat/change')\nexport type changeChatAction = ReturnType<typeof changeChat>\nexport const setChatId = actionCreator<{ id: string }>('chat/set_id')\nexport type setChatIdAction = ReturnType<typeof setChatId>\n\nexport const getMessages =\n  actionCreator<{ pg: number; chat_id: string }>('chat/messages/get')\nexport type getMessagesAction = ReturnType<typeof getMessages>\n\nexport const setMessageRead =\n  actionCreator<{ message_id: string; chat_id: string }>('chat/message/read')\nexport type setMessageReadAction = ReturnType<typeof setMessageRead>\n\nexport const searchUsers = actionCreator<{ query: string }>('users/search')\nexport type searchUsersAction = ReturnType<typeof searchUsers>\n\nexport const createChat = actionCreator<{ user_id: string }>('chat/create')\nexport type createChatAction = ReturnType<typeof createChat>\n\nexport const sendMessage =\n  actionCreator<{\n    content: string\n    from: string | null\n    chat_id: string\n  }>('chat/messages/send')\nexport type sendMessageAction = ReturnType<typeof sendMessage>\n\nexport type SubscribeAction = { type: 'logux/subscribe'; channel: string }\nexport const subscribe = (channel: string): SubscribeAction => ({\n  type: 'logux/subscribe',\n  channel\n})\n\ntype Actions =\n  | changeChatAction\n  | SubscribeAction\n  | getMessagesAction\n  | setChatIdAction\n  | sendMessageAction\n  | searchUsersAction\n\nconst rootReducer = combineReducers({\n  userReducer,\n  chatReducer\n})\n\nexport default rootReducer\nexport type RootState = ReturnType<typeof rootReducer>\n","import { CrossTabClient, log } from '@logux/client'\nimport { createStoreCreator } from '@logux/redux'\nimport config from '../config'\nimport rootReducer from '../Reducers'\n\nlet userId = localStorage.getItem('user_id') || 'anonymous'\nlet token = localStorage.getItem('token') || ''\n\nconst client = new CrossTabClient({\n  subprotocol: '1.0.0',\n  server: config.socket_url,\n  userId,\n  token\n})\n\nconst createStore = createStoreCreator(client)\n\nconst store = createStore(rootReducer)\nlog(store.client)\n\nexport default store\n","import React, { useEffect, useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport './Login.scss'\nimport config from '../../config'\nimport { AES } from 'crypto-js'\nimport { enc } from 'crypto-js'\nimport { Client } from '@logux/client'\nimport store from '../../Logux/store'\nfunction login(\n  username: string,\n  password: string,\n  setStage: (p: string) => void\n) {\n  let client = new Client({\n    subprotocol: '1.0.0',\n    server: config.socket_url,\n    userId: 'anonymous'\n  })\n  client.on('add', (action: any) => {\n    if (action.type === 'login/done') {\n      localStorage.setItem('user_id', action.user_id)\n      localStorage.setItem('token', action.token)\n      localStorage.setItem(\n        'key',\n        AES.decrypt(action.private_key, password).toString(enc.Utf8)\n      )\n      store.client.changeUser(action.user_id, action.token)\n      setStage('/')\n    } else if (action.type === 'logux/undo') {\n      alert(action.reason)\n    }\n  })\n  client.start()\n  client.log.add({ type: 'login', username, password }, { sync: true })\n}\n\nconst Login: React.FunctionComponent = () => {\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: '',\n    key: ''\n  })\n  const handleChange = (e: any) => {\n    setCredentials({\n      ...credentials,\n      [e.target.name]: e.target.value\n    })\n  }\n  useEffect(() => {\n    if (localStorage.getItem('user_id') && localStorage.getItem('token'))\n      history.push('/')\n  }, [])\n  const history = useHistory()\n  return (\n    <>\n      <div className=\"login_main\">\n        <div className={'login_main__header'}>\n          <h1 className={'login_main__header___title'}>\n            Sign in into your account\n          </h1>\n          <h2 className={'login_main__header___undertitle'}>\n            If you don't have account, sign up using button below\n          </h2>\n        </div>\n        <div className={'login_main__block'}>\n          <form\n            className={'login_main__form'}\n            onSubmit={(e) => {\n              e.preventDefault()\n              login(credentials.username, credentials.password, (p: string) =>\n                history.push(p)\n              )\n            }}\n          >\n            <>\n              <h1>Cryptash</h1>\n              <input\n                name={'username'}\n                placeholder={'Username'}\n                className={'login_main__form___username'}\n                onChange={(e) => handleChange(e)}\n              />\n              <input\n                name={'password'}\n                type={'password'}\n                placeholder={'Password'}\n                className={'login_main__form___password'}\n                onChange={(e) => handleChange(e)}\n              />\n              <button type={'submit'} className={'login_main__form___submit'}>\n                Login\n              </button>\n              <Link to={'/register'}>Create new account</Link>\n            </>\n          </form>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Login\n","import React from 'react'\nimport './Preloader.css'\nconst Preloader: React.FunctionComponent = () => {\n  return (\n    <div className=\"lds-roller\">\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  )\n}\nexport default Preloader\n","import './UserPicture.scss'\nconst UserPicture: React.FunctionComponent<{\n  picture: string\n  username: string\n}> = (props) => {\n  if (!props.username) return <></>\n  if (props.picture.includes('http')) {\n    return (\n      <>\n        <div className={'profile_picture'}>\n          <img\n            src={props.picture}\n            alt={`${props.username}'s profile pic`}\n            className={'profile_picture__img'}\n          ></img>\n        </div>\n      </>\n    )\n  }\n  return (\n    <>\n      <div className={'profile_picture'} style={{ background: props.picture }}>\n        <span className={'profile_picture__text'}>\n          {props.username[0].toUpperCase()}\n        </span>\n      </div>\n    </>\n  )\n}\nexport default UserPicture\n","import { useHistory } from 'react-router-dom'\nimport UserPicture from '../../../../Components/UserPicture/UserPicture'\nimport './Header.scss'\n\nconst SidebarHeader = (props: {\n  user: {\n    username: string\n    picture: string\n  }\n  setOpen: () => void\n}) => {\n  const history = useHistory()\n  return (\n    <>\n      <div\n        className={'chat_sidebar__header'}\n        onClick={(_: any) => {\n          if (window.innerWidth < 900)\n            props.setOpen()\n        }}\n      >\n        <UserPicture\n          username={props.user.username}\n          picture={props.user.picture}\n        />\n        <span className={'chat_sidebar__header___username'}>\n          {props.user.username}\n        </span>\n\n        <span className={'material-icons outlined chat_sidebar__header___signout'} onClick={\n          () => {\n              localStorage.removeItem('key')\n              localStorage.removeItem('token')\n              localStorage.removeItem('user_id')\n              history.push('/login')\n              document.location.reload()\n          }\n        }>\n          logout\n        </span>\n      </div>\n    </>\n  )\n}\nexport default SidebarHeader\n","import { decodeBase64, encodeBase64 } from 'tweetnacl-util'\nimport { box } from 'tweetnacl'\nexport const formatKey = (key: any) => {\n  // @ts-ignore\n  // eslint-disable-next-line valid-typeof\n  return typeof key === 'Uint8Array' ? key : decodeBase64(key)\n}\n\nexport const generateKeyPair = () => {\n  const { publicKey, secretKey } = box.keyPair()\n  return {\n    public_key: encodeBase64(publicKey),\n    private_key: encodeBase64(secretKey)\n  }\n}\n","import { decodeBase64, encodeUTF8 } from 'tweetnacl-util'\nimport { box } from 'tweetnacl'\nimport { formatKey } from './keysUtils'\n\nexport const decryptMessage = (\n  secretOrSharedKey: any,\n  messageWithNonce: string,\n  key: any\n) => {\n  const private_key = formatKey(secretOrSharedKey)\n  const public_key = formatKey(key)\n  const messageWithNonceAsUint8Array = decodeBase64(messageWithNonce)\n  const nonce = messageWithNonceAsUint8Array.slice(0, box.nonceLength)\n  const message = messageWithNonceAsUint8Array.slice(\n    box.nonceLength,\n    messageWithNonce.length\n  )\n  const decrypted = key\n    ? box.open(message, nonce, public_key, private_key)\n    : box.open.after(message, nonce, private_key)\n\n  if (!decrypted) {\n    console.error(\"Couldn't decrypt:\")\n    console.error({ messageWithNonce, key, secretOrSharedKey })\n  }\n  if (decrypted) {\n    const base64DecryptedMessage = encodeUTF8(decrypted)\n    return JSON.parse(base64DecryptedMessage)\n  }\n  return {\n    text: ''\n  }\n}\n","const isToday = (date: Date): boolean => {\n  const today = new Date()\n  return (\n    date.getDate() === today.getDate() &&\n    date.getMonth() === today.getMonth() &&\n    date.getFullYear() === today.getFullYear()\n  )\n}\n\nconst isYesterday = (date: Date): boolean => {\n  const today = new Date()\n  return (\n    date.getDate() === today.getDate() - 1 &&\n    date.getMonth() === today.getMonth() &&\n    date.getFullYear() === today.getFullYear()\n  )\n}\n\nconst formatDate = (date: Date | string): string => {\n  const d = new Date(date)\n  const rl = new Intl.RelativeTimeFormat(['en'], { style: 'narrow' })\n  const now = new Date()\n  const diff = now.getTime() - d.getTime()\n  if (isToday(d)) {\n    if (now.getHours() - d.getHours() < 2) {\n      if (Math.floor(diff / 1000 / 60) === 0) {\n        return rl.format(-Math.round(diff / 1000), 'seconds')\n      }\n      return rl.format(-Math.round(diff / 1000 / 60), 'minutes')\n    }\n    return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n  }\n  if (isYesterday(d)) {\n    return `yesterday`\n  } else {\n    return d.toLocaleDateString([], {\n      day: '2-digit',\n      month: 'numeric',\n      year: '2-digit'\n    })\n  }\n}\nconst formatTime = (date: Date | string): string | boolean => {\n  const d = new Date(date)\n  const now = new Date()\n  if (isToday(d)) {\n    if (now.getHours() - d.getHours() < 2) {\n      return false\n    }\n    return `today, ${d.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    })}`\n  } else\n    return `${formatDate(d)}, ${d.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    })}`\n}\n\nexport { formatDate, formatTime }\n","import { FunctionComponent, useEffect, useMemo } from 'react'\nimport TimeAgo from 'timeago-react'\nimport UserPicture from '../../../../Components/UserPicture/UserPicture'\nimport { ChatResponse } from '../../../../Typings/ChatReponse'\nimport { decryptMessage } from '../../../../Utils/decrypt'\nimport { formatTime } from '../../../../Utils/formatDate'\nimport { useHistory } from 'react-router-dom'\nimport { useDispatch } from '@logux/redux'\nimport { createChat } from '../../../../Reducers'\nimport store from '../../../../Logux/store'\nimport { useParams } from 'react-router'\n\nconst ChatCard: FunctionComponent<{ chat: ChatResponse }> = (props) => {\n  const { chat } = props\n  let history = useHistory()\n  const dispatch = useDispatch()\n  const params: {\n    id: string\n  } = useParams()\n  useEffect(() => {\n    store.client.log.type(\n      'chat/create/done',\n      (\n        action: {\n          type: 'chat/create/done'\n          payload: {\n            chat_id: string\n          }\n        },\n        _\n      ) => {\n        history.push(`/${action.payload.chat_id}`)\n      }\n    )\n  }, [history])\n  const text = useMemo(() => {\n    if (chat.messages[0]) {\n      try {\n        return decryptMessage(\n          localStorage.getItem('key'),\n          chat.messages[0].content,\n          chat.user.pub_key\n        ).text\n      } catch (e) {\n        return ''\n      }\n    }\n    return ''\n  }, [chat.messages[0], chat.user.pub_key])\n  const handleClick = (_: any) => {\n    if (!chat.chat_id) {\n      dispatch.sync(createChat({ user_id: chat.user.user_id }))\n    } else {\n      history.push(`/${chat.chat_id}`)\n    }\n  }\n  return (\n    <>\n      <div\n        className={`chat_list__card ${\n          params.id === props.chat.chat_id ? 'active' : ''\n        }`}\n        onClick={(e) => handleClick(e)}\n      >\n        <UserPicture\n          username={chat.user.username}\n          picture={chat.user.picture}\n        />\n        <div className={'right'}>\n          <div className={'chat_list__card___top'}>\n            <span className={'chat_list__card___top____username'}>\n              {chat.user.username}\n            </span>\n            <span className={'chat_list__card___top____date'}>\n              {chat.messages[0] && chat.messageAt ? (\n                formatTime(chat.messageAt) ? (\n                  formatTime(chat.messageAt)\n                ) : (\n                  <TimeAgo\n                    datetime={chat.messageAt}\n                    opts={{ minInterval: 5 }}\n                  />\n                )\n              ) : (\n                ''\n              )}\n            </span>\n          </div>\n          <div className={'chat_list__card___bottom'}>\n            <span className={'chat_list__card___bottom____content'}>\n              {text}\n            </span>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default ChatCard\n","import React from 'react'\nimport { SearchFilter } from '../Typings/SearchFilter'\n\ntype Action =\n  | {\n      type: 'CHANGE_FILTER'\n      payload: {\n        type: string\n        filter: string\n      }\n    }\n  | {\n      type: 'CHANGE_CHATS'\n      payload: {\n        chats: Array<{\n          username: string\n          picture: string\n          user_id: string\n        }>\n      }\n    }\ntype Dispatch = (action: Action) => void\n\nconst SearchContext =\n  React.createContext<{ state: SearchFilter; dispatch: Dispatch } | undefined>(\n    undefined\n  )\n\nconst searchReducer = (state: SearchFilter, action: Action) => {\n  switch (action.type) {\n    case 'CHANGE_FILTER':\n      if (action.payload.type === 'users')\n        if (action.payload.filter === '')\n          return {\n            ...state,\n            chats: [],\n            [action.payload.type]: action.payload.filter\n          }\n      return {\n        ...state,\n        [action.payload.type]: action.payload.filter\n      }\n    case 'CHANGE_CHATS':\n      return {\n        ...state,\n        chats: action.payload.chats\n      }\n    default: {\n      throw new Error(`Unhandled action type: ${action}`)\n    }\n  }\n}\nconst initialState: SearchFilter = {\n  users: '',\n  messages: '',\n  chats: []\n}\nconst SearchProvider = ({ children }: { children: React.ReactNode }) => {\n  const [state, dispatch] = React.useReducer(searchReducer, initialState)\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = { state, dispatch }\n  return (\n    <SearchContext.Provider value={value}>{children}</SearchContext.Provider>\n  )\n}\nconst useSearch = () => {\n  const context = React.useContext(SearchContext)\n  if (context === undefined) {\n    throw new Error('useCount must be used within a CountProvider')\n  }\n  return context\n}\n\nexport { SearchContext, SearchProvider, useSearch }\n","import { ChatResponse } from '../../../../Typings/ChatReponse'\nimport ChatCard from './ChatCard'\nimport { nanoid } from 'nanoid'\nimport './ChatList.scss'\nimport { useSearch } from '../../../../Contexts/SearchReducer'\nimport { connect } from 'react-redux'\nimport { RootState } from '../../../../Reducers'\nconst ChatList = (props: {\n  chats: ChatResponse[]\n}) => {\n  const search = useSearch()\n  const listener = () => {\n    const chatArray: Array<\n      React.FunctionComponentElement<{ chat: ChatResponse }>\n    > = []\n    if (search.state.chats[0])\n      search.state.chats.forEach((user) => {\n        chatArray.push(\n          <ChatCard\n            chat={{\n              chat_id: '',\n              user,\n              messages: []\n            }}\n            key={nanoid(5)}\n          />\n        )\n      })\n    props.chats.forEach((chat: any) => {\n      if (search.state.users) {\n        if (\n          chat.user.username\n            .toLowerCase()\n            .includes(search.state.users.toLowerCase())\n        ) {\n          chatArray.push(<ChatCard chat={chat} key={chat.chat_id} />)\n        }\n      } else {\n        chatArray.push(<ChatCard chat={chat} key={chat.chat_id} />)\n      }\n    })\n    return chatArray\n  }\n  return (\n    <>\n      <div className={'chat_list'}>{listener()}</div>\n    </>\n  )\n}\nexport default connect(\n  (state: RootState, ownProps) => {\n    return {\n      chats: [...state.userReducer.chats],\n    }\n  },\n  (dispatch) => {\n    return {}\n  }\n)(ChatList)\n\n","import { useSearch } from '../../../../Contexts/SearchReducer'\nimport './Search.scss'\nimport { useEffect, useRef } from 'react'\nimport { useDispatch } from '@logux/redux'\nimport { searchUsers } from '../../../../Reducers'\nimport store from '../../../../Logux/store'\n\nconst SidebarSearch = (props: {\n  isOpened: boolean\n  setOpened: (s: boolean) => void\n}) => {\n  const search = useSearch()\n  const input = useRef<HTMLInputElement>(null)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    store.client.log.type(\n      'users/search/done',\n      (\n        action: {\n          type: 'users/search/done'\n          payload: any\n        },\n        _\n      ) => {\n        search.dispatch({\n          type: 'CHANGE_CHATS',\n          payload: { chats: action.payload.users }\n        })\n      }\n    )\n  }, [search])\n\n  const handleSearch = (e: { target: { value: string } }) => {\n    search.dispatch({\n      type: 'CHANGE_FILTER',\n      payload: {\n        type: 'users',\n        filter: e.target.value\n      }\n    })\n    if (e.target.value.length < 3) {\n      search.dispatch({\n        type: 'CHANGE_CHATS',\n        payload: {\n          chats: []\n        }\n      })\n      return\n    }\n    dispatch.sync(searchUsers({ query: e.target.value }))\n  }\n  return (\n    <>\n      <div className={'chat_sidebar__search'}>\n        <div\n          className={'chat_sidebar__search___bar'}\n          onClick={(_) => {\n            if (!props.isOpened) {\n              if (input.current !== null) {\n                setTimeout(() => {\n                  props.setOpened(true)\n                  if (input.current !== null) input.current.focus()\n                }, 100)\n              }\n            }\n          }}\n        >\n          <span className=\"material-icons outlined\">search</span>\n          <input\n            type={'text'}\n            className={'chat_sidebar__search___bar-input'}\n            placeholder={'Search users'}\n            ref={input}\n            onChange={(e) => handleSearch(e)}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\nexport default SidebarSearch\n","import SidebarHeader from './Header/Header'\nimport './Sidebar.scss'\nimport ChatList from './ChatList/ChatList'\nimport SidebarSearch from './Search/Search'\nimport { SearchProvider } from '../../../Contexts/SearchReducer'\nimport { useScreen } from '../../../Contexts/ScreenContext'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../../Reducers'\n\nconst Sidebar = () => {\n  const screen = useScreen()\n  const user = useSelector((state: RootState) => state.userReducer)\n  const [isOpened, setOpen] = useState(screen.state.width > 900)\n  const [isOpenedByUser, setOpenedByUser] = useState(false)\n  useEffect(() => {\n    if (!isOpenedByUser) setOpen(window.innerWidth > 900)\n  }, [screen.state.width])\n  return (\n    <>\n      <SearchProvider>\n        <div className={`chat_sidebar ${isOpened ? 'opened' : 'closed'}`}>\n          <SidebarHeader\n            user={{ username: user.username, picture: user.picture }}\n            setOpen={() => {\n              setOpen(!isOpened)\n              setOpenedByUser(!isOpenedByUser)\n            }}\n          />\n          <SidebarSearch\n            isOpened={isOpened}\n            setOpened={(_: boolean) => setOpen(_)}\n          />\n          <ChatList />\n        </div>\n      </SearchProvider>\n    </>\n  )\n}\nexport default Sidebar\n","import { useRef, useState } from 'react'\nimport { encryptMessage } from '../../../Utils/encrypt'\nimport { RootState, sendMessage } from '../../../Reducers'\nimport { useSelector } from 'react-redux'\nimport { useDispatch } from '@logux/redux'\nimport 'emoji-mart/css/emoji-mart.css'\nimport { EmojiData, Picker } from 'emoji-mart'\n\nconst MessageInput = (props: { scrollDown: () => void }) => {\n  const [message, setMessage] = useState('')\n  const [showPicker, setShowPicker] = useState(false)\n  const chat = useSelector((state: RootState) => state.chatReducer)\n  const dispatch = useDispatch()\n  const handleInput = (e: any) => {\n    setMessage(e.target.value)\n  }\n  const inputRef = useRef<HTMLInputElement>(null)\n  const handleSend = (e: any) => {\n    e.preventDefault()\n    const msg = encryptMessage(\n      localStorage.getItem('key'),\n      {\n        text: message\n      },\n      chat.pub_key\n    )\n    dispatch.sync(\n      sendMessage({\n        chat_id: chat.chat_id,\n        content: msg,\n        from: localStorage.getItem('user_id')\n      })\n    )\n    if (inputRef.current) inputRef.current.value = ''\n    setMessage('')\n    props.scrollDown()\n    inputRef.current?.focus()\n    setShowPicker(false)\n  }\n  const handleEmojiSelect = (emoji: EmojiData) => {\n    if (inputRef.current) {\n      if ('native' in emoji) {\n        inputRef.current.value += emoji.native\n        setMessage(inputRef.current.value)\n      }\n    }\n  }\n  return (\n    <>\n      <div className={'chat_dialog__input'}>\n        <div className={'chat_dialog__input-wrap'}>\n          <form\n            className={'chat_dialog__input-wrap--form'}\n            action=\"\"\n            onSubmit={(e) => handleSend(e)}\n          >\n            {showPicker ? (\n              <Picker\n                emojiSize={24}\n                perLine={8}\n                onSelect={(emoji) => handleEmojiSelect(emoji)}\n              />\n            ) : null}\n            <span\n              className=\"material-icons outlined\"\n              onClick={() => setShowPicker(!showPicker)}\n            >\n              mood\n            </span>\n            <input\n              className={'chat_dialog__input-wrap--message'}\n              type={'text'}\n              placeholder={'Write a message...'}\n              onInput={(e) => handleInput(e)}\n              ref={inputRef}\n            />\n            <button type={'submit'} className={'material-icons'}>\n              send\n            </button>\n          </form>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default MessageInput\n","import nacl, { box } from 'tweetnacl'\nimport { decodeUTF8, encodeBase64 } from 'tweetnacl-util'\nimport { formatKey } from './keysUtils'\n\nexport const encryptMessage = (secretOrSharedKey: any, json: any, key: any) => {\n  const private_key = formatKey(secretOrSharedKey)\n  const public_key = formatKey(key)\n  const nonce = nacl.randomBytes(box.nonceLength)\n  const messageUint8 = decodeUTF8(JSON.stringify(json))\n  const encrypted = public_key\n    ? box(messageUint8, nonce, public_key, private_key)\n    : box.after(messageUint8, nonce, private_key)\n\n  const fullMessage = new Uint8Array(nonce.length + encrypted.length)\n  fullMessage.set(nonce)\n  fullMessage.set(encrypted, nonce.length)\n  return encodeBase64(fullMessage)\n}\n","import UserPicture from '../../../Components/UserPicture/UserPicture'\nimport { FunctionComponent } from 'react'\nimport './DialogHeader.scss'\n\nconst DialogHeader: FunctionComponent<{\n  username: string\n  picture: string\n  status: string\n}> = (props) => {\n  const generateStatus = () => {\n    switch (props.status) {\n      case 'OFFLINE': {\n        return <>\n          <div className={'oval grey'}></div>\n          <span>Offline</span>\n        </>\n        break\n      }\n      case 'ONLINE': {\n        return <>\n          <div className={'oval green'}></div>\n          <span>Online</span>\n        </>\n      }\n    }\n  }\n  return (\n    <>\n      <div className={'chat_dialog__header'}>\n        <section className={'chat_dialog__header___picture'}>\n          <UserPicture picture={props.picture} username={props.username} />\n        </section>\n        <section className={'chat_dialog__header___info'}>\n          <span className={'chat_dialog__header___info-username'}>{props.username}</span>\n          <div className={'chat_dialog__header___info-status'}>{generateStatus()}</div>\n        </section>\n      </div>\n    </>\n  )\n}\n\nexport default DialogHeader\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { decryptMessage } from '../../../Utils/decrypt'\nimport { formatTime } from '../../../Utils/formatDate'\nimport TimeAgo from 'timeago-react'\nimport { useSelector } from 'react-redux'\nimport { RootState, setMessageRead } from '../../../Reducers'\nimport { useDispatch } from '@logux/redux'\nimport store from '../../../Logux/store'\n\nconst Message: React.FunctionComponent<{\n  content: string\n  pub_key: string\n  date: Date\n  fromMe: boolean\n  isRead: boolean\n  id: string\n  subscribeToScroll: Function\n}> = (props) => {\n  let content: string = useMemo(() => {\n    try {\n      return decryptMessage(\n        localStorage.getItem('key'),\n        props.content,\n        props.pub_key\n      ).text\n    } catch (error) {\n      return ''\n    }\n  }, [props.content, props.pub_key])\n  const [isRead, setRead] = useState(props.isRead)\n  const messageRef = useRef<HTMLDivElement>(null)\n  const isActionSent = useRef(false)\n  const chat = useSelector((x: RootState) => x.chatReducer)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (!isRead)\n      store.subscribe(() => {\n        const messages = store.getState().chatReducer.messages\n        const message = messages.filter(\n          (m: any) => m.message_id === props.id\n        )[0]\n        if (message && message.read && !isRead) {\n          setRead(true)\n        }\n      })\n  }, [isRead, props.id])\n  useEffect(() => {\n    const scrollCallback = () => {\n      if (isRead || props.fromMe || isActionSent.current) return\n      const rect = messageRef.current?.getBoundingClientRect()\n      if (rect) {\n        if (rect.top > 0) {\n          isActionSent.current = true\n          dispatch\n            .sync(\n              setMessageRead({\n                chat_id: chat.chat_id,\n                message_id: props.id\n              })\n            )\n            .then(() => (isActionSent.current = false))\n          setRead(true)\n        }\n      }\n    }\n    scrollCallback()\n  }, [chat.chat_id, dispatch, isRead, props.fromMe, props.id])\n\n  const urlRE = new RegExp(\n    '([a-zA-Z0-9]+://)?([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?([a-zA-Z0-9.-]+\\\\.[A-Za-z]{2,4})(:[0-9]+)?([^ ])+',\n    'g'\n  )\n  if (!content) return null\n  const urls = content.match(urlRE)\n  const generateMessageWithUrl = () => {\n    let c = content\n    const res: JSX.Element[] = []\n    if (!urls) return content\n    urls.forEach((url) => {\n      const split = c.split(url)\n      if (split[0] !== '') res.push(<span>{split[0]}</span>)\n      res.push(\n        <a\n          rel={'noopener noreferrer'}\n          target={\"_blank\"}\n          href={url.includes('http') ? url : 'https://' + url}\n        >\n          <span className={'chat_dialog__messages-message_top-bubble--link'}>\n            {url}\n          </span>\n        </a>\n      )\n      c = split[1]\n    })\n    return res\n  }\n  return (\n    <>\n      <div\n        className={`chat_dialog__messages-message ${\n          props.fromMe ? 'fromMe' : 'toMe'\n        }`}\n        ref={messageRef}\n      >\n        <div\n          className={`chat_dialog__messages-message_top ${\n            props.fromMe ? 'fromMe' : 'toMe'\n          }`}\n        >\n          <div\n            className={`chat_dialog__messages-message_top-bubble ${\n              props.fromMe ? 'fromMe' : 'toMe'\n            }`}\n          >\n            {generateMessageWithUrl()}\n          </div>\n          <div className={`chat_dialog__messages-message_top-context`}>\n            <span className=\"material-icons\">more_horiz</span>\n          </div>\n          {props.fromMe ? (\n            <div className={`chat_dialog__messages-message_top-status`}>\n              <span className=\"material-icons\">\n                {isRead ? 'done_all' : 'done'}\n              </span>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        <div\n          className={`chat_dialog__messages-message_bottom ${\n            props.fromMe ? 'fromMe' : 'toMe'\n          }`}\n        >\n          {formatTime(props.date) ? (\n            formatTime(props.date)\n          ) : (\n            <TimeAgo datetime={props.date} opts={{ minInterval: 10 }} />\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Message\n","import { FunctionComponent, useEffect, useMemo, useRef, useState } from 'react'\nimport Preloader from '../../../Components/Preloader/Preloader'\nimport './Dialog.scss'\nimport MessageInput from './MessageInput'\nimport { useParams } from 'react-router'\nimport DialogHeader from './DialogHeader'\nimport { useDispatch, useSubscription } from '@logux/redux'\nimport { connect, useSelector } from 'react-redux'\nimport {\n  changeChat,\n  getMessages,\n  RootState,\n  setChatId\n} from '../../../Reducers'\nimport Message from './Message'\nimport * as MessageTyping from '../../../Typings/Message'\nconst Dialog: FunctionComponent<{\n  chat_id: string\n  messages: MessageTyping.Message[]\n  pub_key: string\n  status: string\n  username: string\n  picture: string\n}> = (props) => {\n  let params: { id: string } = useParams()\n  const dispatch = useDispatch()\n  const page = useRef(0)\n  const prevScrollHeight = useRef(0)\n  const [isRequested, setRequested] = useState(false)\n  const isSubscribing = useSubscription(\n    props.chat_id ? [`chat/${props.chat_id}`] : []\n  )\n  let chat = useSelector((state: RootState) => state.chatReducer)\n  const messagesDiv = useRef<HTMLDivElement>(null)\n  const callbacks = useRef<Array<Function>>([])\n\n  const subscribeToScroll = (callback: Function) => {\n    callbacks.current.push(callback)\n    return () => callbacks.current.filter((x) => x !== callback)\n  }\n\n  useEffect(() => {\n    dispatch(setChatId({ id: params.id }))\n  }, [dispatch, params.id])\n\n  useEffect(() => {\n    dispatch(changeChat({ id: params.id }))\n  }, [dispatch, params.id])\n\n  const scrollCallback = (e: any) => {\n    callbacks.current.forEach((callback) => {\n      callback(e)\n    })\n    if (e.target.scrollTop === 0) {\n      if (!isRequested) {\n        page.current = page.current + 1\n        prevScrollHeight.current = messagesDiv.current\n          ? messagesDiv.current.scrollHeight\n          : 0\n        setRequested(true)\n        dispatch\n          .sync(getMessages({ pg: page.current, chat_id: params.id }))\n          .then(() => setRequested(false))\n      }\n    }\n  }\n\n  const mes = useMemo(() => {\n    const msgComp: Array<JSX.Element> = []\n    props.messages.forEach(\n      (m: {\n        content: string\n        fromMe: boolean\n        date: Date\n        read: boolean\n        message_id: string\n      }) => {\n        return msgComp.push(\n          <Message\n            id={m.message_id}\n            subscribeToScroll={(c: Function) => subscribeToScroll(c)}\n            isRead={m.read}\n            content={m.content}\n            pub_key={props.pub_key}\n            key={m.message_id}\n            fromMe={m.fromMe}\n            date={m.date}\n          />\n        )\n      }\n    )\n    return msgComp\n  }, [props.messages, props.pub_key])\n\n  const scrollDown = () => {\n    if (\n      messagesDiv.current &&\n      messagesDiv.current.scrollTop <\n        messagesDiv.current.scrollHeight - 300 - window.innerHeight\n    )\n      messagesDiv.current?.scrollTo(0, messagesDiv.current?.scrollHeight)\n    prevScrollHeight.current = 0\n  }\n  useEffect(() => {\n    if (messagesDiv.current && page.current === 0) {\n      if (\n        messagesDiv.current.scrollTop <\n        messagesDiv.current.scrollHeight - 300 - window.innerHeight\n      )\n        messagesDiv.current.scrollTo(0, messagesDiv.current.scrollHeight)\n    } else if (messagesDiv.current) {\n      if (\n        messagesDiv.current.scrollTop <\n        messagesDiv.current.scrollHeight - 300 - window.innerHeight\n      )\n        messagesDiv.current.scrollTo(\n          0,\n          messagesDiv.current.scrollHeight - prevScrollHeight.current\n        )\n    }\n  }, [isSubscribing, messagesDiv.current?.scrollHeight])\n  if (!params.id) {\n    return <div>No chat!</div>\n  }\n  if (isSubscribing)\n    return (\n      <div className={'preloader'}>\n        <Preloader />\n      </div>\n    )\n  return (\n    <>\n      <div className={'chat_dialog'}>\n        <DialogHeader username={props.username} picture={props.picture} status={props.status}/>\n        <div\n          className={'chat_dialog__messages'}\n          onScroll={(e) => scrollCallback(e)}\n          ref={messagesDiv}\n        >\n          {mes}\n        </div>\n        <MessageInput scrollDown={() => scrollDown()} />\n      </div>\n    </>\n  )\n}\nexport default connect(\n  (state: RootState, ownProps) => {\n    return {\n      chat_id: state.chatReducer.chat_id,\n      messages: [...state.chatReducer.messages],\n      pub_key: state.chatReducer.pub_key,\n      status: state.chatReducer.status,\n      username: state.chatReducer.username,\n      picture: state.chatReducer.picture\n    }\n  },\n  (dispatch) => {\n    return {}\n  }\n)(Dialog)\n","import React from 'react'\nimport { Message } from '../Typings/Message'\n\ntype Action =\n  | { type: 'ADD_MESSAGE'; payload: any }\n  | { type: 'ADD_MORE_MESSAGES'; payload: any }\n  | { type: 'CHANGE_KEY'; payload: any }\n  | { type: 'REMOVE_MESSAGE'; payload: any }\n  | { type: 'EDIT_MESSAGE'; payload: any }\n  | { type: 'CHANGE_DIALOG'; payload?: any }\n  | {\n      type: 'SET_DIALOG_DATA'\n      payload?: {\n        username?: string\n        pub_key?: string\n        user_id?: string\n        picture?: string\n      }\n    }\n  | { type: 'SET_MESSAGE_READ_STATUS'; payload: { id: string } }\ntype Dispatch = (action: Action) => void\ntype DialogState = {\n  messages: Message[]\n  username: string\n  pub_key: string\n  picture: string\n  user_id: string\n}\nconst DialogContext =\n  React.createContext<{ state: DialogState; dispatch: Dispatch } | undefined>(\n    undefined\n  )\nconst dialogReducer = (state: DialogState, action: Action) => {\n  const data = action.payload\n  switch (action.type) {\n    case 'ADD_MESSAGE': {\n      console.log('NEW MESSAGE')\n      state.messages.push(...data)\n      return { ...state }\n    }\n    case 'ADD_MORE_MESSAGES': {\n      state.messages = [...data, ...state.messages]\n      return { ...state }\n    }\n    case 'CHANGE_DIALOG': {\n      return {\n        username: '',\n        user_id: '',\n        picture: '',\n        pub_key: '',\n        messages: []\n      }\n    }\n    case 'CHANGE_KEY': {\n      state.pub_key = action.payload\n      return state\n    }\n    case 'SET_MESSAGE_READ_STATUS': {\n      const msg = state.messages.filter((x) => x.message_id === data.id)[0]\n      msg.read = true\n      console.log(state)\n      return state\n    }\n    case 'SET_DIALOG_DATA': {\n      return { ...state, ...data }\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`)\n    }\n  }\n}\nconst initialState: DialogState = {\n  username: '',\n  user_id: '',\n  picture: '',\n  pub_key: '',\n  messages: []\n}\nconst DialogProvider = ({ children }: { children: React.ReactNode }) => {\n  const [state, dispatch] = React.useReducer(dialogReducer, initialState)\n  const value = { state, dispatch }\n  return (\n    <DialogContext.Provider value={value}>{children}</DialogContext.Provider>\n  )\n}\nconst useDialog = () => {\n  const context = React.useContext(DialogContext)\n  if (context === undefined) {\n    throw new Error('useCount must be used within a CountProvider')\n  }\n  return context\n}\n\nexport { DialogContext, DialogProvider, useDialog }\n","import Sidebar from './Sidebar/Sidebar'\nimport './Chat.scss'\nimport React, { useEffect } from 'react'\nimport Preloader from '../../Components/Preloader/Preloader'\nimport { useParams } from 'react-router-dom'\nimport Dialog from './Dialog/Dialog'\nimport { DialogProvider } from '../../Contexts/DialogContext'\nimport { useSubscription } from '@logux/redux'\nimport store from '../../Logux/store'\nimport { Provider } from 'react-redux'\nimport { badge } from '@logux/client'\nimport { badgeStyles } from '@logux/client/badge/styles'\n\nconst Chat: React.FunctionComponent = () => {\n  const params: { id: string } = useParams()\n  const isSubscribing = useSubscription([\n    `user/${localStorage.getItem('user_id')}`\n  ])\n  useEffect(() => {\n    if (!isSubscribing) \n      badge(store.client, {\n        messages: {\n          synchronized: 'Everything is up to date',\n          disconnected: 'No connection to server.',\n          wait: 'Sending...',\n          sending: 'Sending...',\n          error: 'Error occurred. Please, try again!',\n          protocolError: 'Error occurred. Please, contact admins!',\n          syncError: 'Error while syncing...',\n          denied: 'Access denied'\n        },\n        styles: badgeStyles\n      })\n  }, [isSubscribing])\n  if (params.id === undefined) {\n    console.log('No chat')\n    return (\n      <Provider store={store}>\n        <div className={'chat'}>\n          <Sidebar />\n        </div>\n      </Provider>\n    )\n  }\n\n  if (isSubscribing) {\n    return <Preloader />\n  }\n\n  return (\n    <Provider store={store}>\n      <div className={'chat'}>\n        <Sidebar />\n        <DialogProvider>\n          <Dialog />\n        </DialogProvider>\n      </div>\n    </Provider>\n  )\n}\nexport default Chat\n","import React, { useState, useEffect } from 'react'\nimport { Redirect, useHistory } from 'react-router-dom'\nimport Preloader from '../../Components/Preloader/Preloader'\nimport config from '../../config'\nimport Chat from '../Chat/Chat'\nimport { badge, Client } from '@logux/client'\nimport store from '../../Logux/store'\nimport { badgeStyles } from '@logux/client/badge/styles'\nimport { Provider } from 'react-redux'\n\nconst Home = () => {\n  const [isLoggined, setLoginned] = useState(0)\n  const token = localStorage.getItem('token')\n  const history = useHistory()\n  const signOut = () => {\n    history.push('/login')\n    setLoginned(1)\n    localStorage.removeItem('key')\n    localStorage.removeItem('token')\n    localStorage.removeItem('user_id')\n  }\n  // Check if authenticated\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      let client = new Client({\n        subprotocol: '1.0.0',\n        server: config.socket_url,\n        userId: 'anonymous'\n      })\n      client.on('add', (action: any) => {\n        if (action.type === 'user/check/done') {\n          store.client.start()\n          setLoginned(2)\n        } else if (action.type === 'logux/undo') {\n          signOut()\n        }\n      })\n      client.start()\n      client.log.add(\n        { type: 'user/check', token: localStorage.getItem('token') },\n        { sync: true }\n      )\n    } else {\n      signOut()\n    }\n  }, [token])\n\n  if (isLoggined === 0) {\n    return <Preloader />\n  }\n\n  if (isLoggined === 1) {\n    return <Redirect to={'/login'} />\n  }\n  return (\n    <Provider store={store}>\n      <Chat />\n    </Provider>\n  )\n}\n\nexport default Home\n","import React, { useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport './Register.scss'\nimport config from '../../config'\nimport { generateKeyPair } from '../../Utils/keysUtils'\nimport { Client } from '@logux/client'\nimport { AES } from 'crypto-js'\nimport store from '../../Logux/store'\nconst Register: React.FunctionComponent = () => {\n  const [key] = useState(generateKeyPair())\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: ''\n  })\n  const [doesMeetReqs, setMeetReq] = useState(false)\n  const [isSame, setSame] = useState(false)\n  let history = useHistory()\n  const handleChange = (e: any) => {\n    if (e.target.name === 'verify_password') {\n      if (e.target.value === credentials.password) {\n        setSame(true)\n      } else {\n        setSame(false)\n      }\n    } else {\n      setCredentials({\n        ...credentials,\n        [e.target.name]: e.target.value\n      })\n      if (e.target.name === 'password') {\n        let pass_regexp =\n          /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{8,31}$/ // 8 to 31 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character\n        if (e.target.value.match(pass_regexp)) {\n          setMeetReq(true)\n        } else {\n          setMeetReq(false)\n        }\n      }\n    }\n  }\n  function register(\n    username: string,\n    password: string,\n    key: {\n      private_key: string\n      public_key: string\n    }\n  ) {\n    if (!password || !username) return\n    if (!isSame) return\n    if (!doesMeetReqs) alert(\"8 to 31 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character\")\n    if (username.length < 3) {\n      alert('Username must be at least 3 symbols')\n      return\n    }\n    let pass_regexp =\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{8,31}$/ // 8 to 31 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character\n    if (!password.match(pass_regexp)) {\n      setMeetReq(false)\n      return\n    }\n    let client = new Client({\n      subprotocol: '1.0.0',\n      server: config.socket_url,\n      userId: 'anonymous',\n    })\n    client.on('add', (action: any) => {\n      if (action.type === 'register/done') {\n        localStorage.setItem('user_id', action.user_id)\n        localStorage.setItem('token', action.token)\n        localStorage.setItem('key', key.private_key)\n        store.client.changeUser(action.user_id, action.token)\n        history.push(`/`)\n      } else if (action.type === 'logux/undo') {\n        alert(action.reason)\n      }\n    })\n    client.start()\n    client.log.add(\n      {\n        type: 'register',\n        username,\n        password,\n        private_key: AES.encrypt(key.private_key, password).toString(),\n        pub_key: key.public_key\n      },\n      { sync: true }\n    )\n  }\n  const firstStage = () => {\n    return (\n      <>\n        <h1>Cryptash</h1>\n        <input\n          name={'username'}\n          placeholder={'Username'}\n          className={'register_main__form___username'}\n          onChange={(e) => handleChange(e)}\n        />\n        <input\n          name={'password'}\n          type={'password'}\n          placeholder={'Password'}\n          autoComplete={'new-password'}\n          className={`register_main__form___password ${\n            doesMeetReqs ? '' : 'red-outline'\n          }`}\n          onChange={(e) => handleChange(e)}\n        />\n        <input\n          name={'verify_password'}\n          type={'password'}\n          autoComplete={'new-password'}\n          placeholder={'Verify Password'}\n          className={`register_main__form___password ${\n            isSame ? '' : 'red-outline'\n          }`}\n          onChange={(e) => handleChange(e)}\n        />\n        <button\n          type={'submit'}\n          className={'register_main__form___submit'}\n          disabled={!isSame}\n        >\n          Create account\n        </button>\n        <Link to={'/login'}>Back to login</Link>\n      </>\n    )\n  }\n  return (\n    <>\n      <div className=\"register_main\">\n        <div className={'register_main__header'}>\n          <h1 className={'register_main__header___title'}>\n            Create your account\n          </h1>\n          <h2 className={'register_main__header___undertitle'}>\n            If you already have an account, login using button below\n          </h2>\n        </div>\n        <div className={'register_main__block'}>\n          <form\n            className={'register_main__form'}\n            onSubmit={(e) => {\n              e.preventDefault()\n              register(credentials.username, credentials.password, key)\n            }}\n          >\n            {firstStage()}\n          </form>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Register\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Login from './Pages/Login/Login'\nimport Home from './Pages/Home/Home'\nimport Register from './Pages/Register/Register'\nimport { ScreenProvider } from './Contexts/ScreenContext'\nReactDOM.render(\n  <React.StrictMode>\n    <ScreenProvider>\n      <BrowserRouter>\n        <App>\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route path={['/:id', '/']} exact component={Home} />\n        </App>\n      </BrowserRouter>\n    </ScreenProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}